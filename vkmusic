#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pip install bs4 vk_api pyyaml

import os,getopt,sys,time,yaml,re
from urllib.request import urlretrieve
from urllib.error import HTTPError
import webbrowser
import ssl
import vk_api
from vk_api.audio import VkAudio

def captcha_handler(captcha):
    url = captcha.get_url()
    key = input("Enter captcha code {0}: ".format(url)).strip()
    webbrowser.open(url, new=2, autoraise=True)
    return captcha.try_again(key)

def auth_handler():
    key = input("Enter authentication code: ")
    remember_device = True
    return key, remember_device

def reporthook(count, block_size, total_size):
    global start_time
    if count == 0:
        start_time = time.time()
        return
    duration = time.time() - start_time
    progress_size = int(count * block_size)
    if duration != 0:
        speed = int(progress_size / (1024 * duration))
    else:
        speed = 1
    percent = min(int(count * block_size * 100 / total_size), 100)
    sys.stdout.write("\r%d%%, %d MB, %d KB/s" % (percent, progress_size / (1024 * 1024), speed))
    sys.stdout.flush()


# usage
def usage(status = 0):
  print('Usage: '+ os.path.basename(sys.argv[0])+' -i <id>')
  sys.exit(status)

def main():
    AvailableSymbols = "[^-_A-Za-zА-Яа-я0-9&! ':.,)(\[\]]"
    reAvailableSymbols = re.compile(AvailableSymbols)
    currentDir = os.path.dirname(os.path.abspath(__file__))
    configPath = os.path.join(currentDir, "config.yml")
    vkMusicDstPath = os.path.join(currentDir, "music")
    print('Login vk.com...')
    with open(configPath, 'r') as stream:
        try:
            config   = yaml.load(stream)
            login    = config['login']
            password = config['password']
        except yaml.YAMLError as exc:
            print(exc)
            login    = input('Enter login: ')
            password = input('Enter password: ')
    ########################################################################

    vk_session = vk_api.VkApi(
        login, password,
        captcha_handler=captcha_handler,
        auth_handler=auth_handler
    )

    try:
        vk_session.auth()
    except vk_api.AuthError as error_msg:
        print(error_msg)
        return
    print('[ok]')
    user_id = str(vk_session.get_api().users.get()[0]['id'])
    ########################################################################
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            #"hdv",
            "hido",
            ["help", "id", "directory", "offset"]
        )
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage(2)
    verbose = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-h", "--help"):
            usage()
        elif o in ("-i", "--id"):
            user_id = a
        elif o in ("-d", "--directory"):
            vkMusicDstPath = a
        elif o in ("-o", "--offset"):
            config['offset'] = a
        else:
            assert False, "unhandled option"
            usage()

    ########################################################################
    print('Fetching audios for ' + user_id)
    ########################################################################

    vkaudio = VkAudio(vk_session)

    offset = 0
    audios = []
    last_chunk = []
    chunk = None
    while chunk != last_chunk:
        last_chunk = chunk
        chunk = vkaudio.get(user_id, offset)
        audios.extend(chunk)
        offset += 50
    total = len(audios)

    ########################################################################
    vkMusicDstUserPath = os.path.join(vkMusicDstPath, user_id)
    if not os.path.exists(vkMusicDstUserPath):
        os.makedirs(vkMusicDstUserPath)

    downloaded = 0
    for i, track in enumerate(audios[::-1]):
        filename = track['artist'] + ' - ' + track['title']
        ### 150 symbols - OSError: [Errno 36] File name too long
        filename = re.sub(reAvailableSymbols, '', filename[:150]).strip()
        fileFullPath = vkMusicDstUserPath + '/' + filename + '.mp3'

        if hasattr(config, 'offset'):
            if i < config['offset']:
                print('Ty again [' + filename + ' ' + str(1) + '/' + str(total) + ']')
                continue
        if os.path.isfile(fileFullPath):
            print('Skipping [' + filename + ' ' + str(i + 1) + '/' + str(total) + ']')
            downloaded += 1
            continue

        print('Downloading [' + filename + ' ' + str(i + 1) + '/' + str(total) + ']')
        try:
            urlretrieve(track['url'], fileFullPath, reporthook)
            downloaded += 1
        except HTTPError as err:
            if err.code == 404:
                print('NOT FOUND: ' + filename)
            else:
                print('ERROR: ' + filename)
        except ssl.SSLError:
            print('SSL ERROR: ' + filename + ' try launching again')
        sys.stdout.flush()

        print('Done! Downloaded ' + str(downloaded) + '/' + str(total))
    if downloaded < total:
        print('Try to launch again to to download missing')
        sys.stdout.flush()

if __name__ == '__main__': main()
